CENG-3502 : Dynamic Web Programming
 Final Assignment: FlyTicket Project - Full Stack Final Project
 üõ´Project Overview
 Build a web application called FlyTicket for an airline company where users can:
 ‚Ä¢ View available flights
 ‚Ä¢ Search for flights
 ‚Ä¢ Book (buy) tickets
 ‚Ä¢ Admins can create, update, and delete flights
 Students must create both Frontend and Backend parts.
 üåêTechnologies to Use
 ‚Ä¢ Frontend: React / Vue.js / Plain HTML-CSS-JS
 ‚Ä¢ Backend: Node.js + Express / Django / Flask
 ‚Ä¢ Database: MongoDB / PostgreSQL / MySQL
 üìÖKey Features
 User Side (Customer)
 ‚Ä¢ View all available flights
 ‚Ä¢ Search flights by origin, destination, date
 ‚Ä¢ Book a ticket by entering passenger information
 ‚Ä¢ View booking confirmation
 Admin Side (Admin Panel)
 ‚Ä¢ Admin login system (simple password login acceptable)
 ‚Ä¢ Add, edit, delete flights
 ‚Ä¢ View all ticket bookings
 
  Database Models
 1. City
 ‚Ä¢ city_id: String
 ‚Ä¢ city_name: String (81 Cities of T√ºrkiye)
 2. Flight
 ‚Ä¢ flight_id: String
 ‚Ä¢ from_city: Foreign key to City
 ‚Ä¢ to_city: Foreign key to City
 ‚Ä¢ departure_time: DateTime
 ‚Ä¢ arrival_time: DateTime
 ‚Ä¢ price: Number
 ‚Ä¢ seats_total: Number
 ‚Ä¢ seats_available: Number
 3. Ticket
 ‚Ä¢ ticket_id: String
 ‚Ä¢ passenger_name: String
 ‚Ä¢ passenger_surname: String
 ‚Ä¢ passenger_email: String
 ‚Ä¢ flight_id: Foreign key to Flight
 ‚Ä¢ seat_number: String (optional)
 4. Admin
 ‚Ä¢ username: String
 ‚Ä¢ password: String (hashed)
 
 Flight Scheduling Special Rules
 Flight Rules:
 1. 81 Cities of T√ºrkiye must be available.
 2. No two flights from the same city can depart at the same hour.
 ‚Ä¢ Example: If a flight departs from Istanbul at 10:00 AM, another flight cannot depart 
from Istanbul at 10:00 AM.
 3. No two flights can arrive at the same city at the same arrival time.
 ‚Ä¢ Example: If a flight arrives in Ankara at 2:00 PM, no other flight can arrive in 
Ankara at 2:00 PM.
 Note: Please check all other rules.
 üìÖPages to Develop
 ‚Ä¢ Home page: Flight search and results
 ‚Ä¢ Flight detail page: Ticket booking form
 ‚Ä¢ Booking confirmation page
 ‚Ä¢ Admin dashboard (Login protected)
 ‚Ä¢ Admin create/update/delete flight pages
 üì¶Deliverables
 ‚Ä¢ Frontend code (GitHub repository)
 ‚Ä¢ Backend code (GitHub repository)
 ‚Ä¢ Database export (MongoDB dump or SQL file)
 ‚Ä¢ README file including:
 ‚Ä¢ How to run the project
 ‚Ä¢ Admin login credentials
 ‚Ä¢ Technologies used
‚≠êBonus Features (Optional)
 ‚Ä¢ Seat selection during ticket booking
 ‚Ä¢ Send e-ticket by email (SMTP or Email API)
 ‚Ä¢ Payment simulation
 ‚Ä¢ User authentication system (Register/Login)
 ‚Ä¢ Mobile responsive design
 ‚úÖImportant Reminders
 ‚Ä¢ Validate flight rules on the backend, not only frontend!
 ‚Ä¢ Provide clear and friendly error messages.
 ‚Ä¢ Keep UI clean and functional.
 üìùSubmission Deadline
 ‚Ä¢ Deadline: 26/05/2025
 üìÑExample API Endpoints (Suggestion)
 ‚Ä¢ GET /flights - List all flights
 ‚Ä¢ POST /flights - Create a new flight (Admin only)
 ‚Ä¢ PUT /flights/:id - Update a flight (Admin only)
 ‚Ä¢ DELETE /flights/:id - Delete a flight (Admin only)
 ‚Ä¢ POST /tickets - Book a ticket
 ‚Ä¢ GET /tickets/:email - List tickets by user email
Example Concept Sketches:
 ‚úà
 Ô∏è
 1. Admin Dashboard
 ‚Ä¢ Title: "Flight Management"
 ‚Ä¢ Table columns: Flight ID, From, To, Departure Time, Arrival Time, Price, Actions
 ‚Ä¢ Buttons: [Edit] [Delete] [Add New Flight]
 ‚úà
 Ô∏è
 2. User Flight Search Page
 ‚Ä¢ Form: From (Dropdown) - To (Dropdown) - Date (Date Picker) - [Search Flights]
 ‚Ä¢ Flight Cards: Show each flight with Price, Time, Available Seats
 ‚Ä¢ Book Button on each flight
 ‚úà
 Ô∏è
 3. Booking Confirmation Page
 ‚Ä¢ "Success" badge
 ‚Ä¢ Ticket Details: Passenger Name, Flight Details, Seat Number
 ‚Ä¢ Option to Download E-Ticket